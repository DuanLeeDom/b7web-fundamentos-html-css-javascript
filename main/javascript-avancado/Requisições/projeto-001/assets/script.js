/*
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù    ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   

üîπ INTRODU√á√ÉO A REQUISI√á√ïES (JAVASCRIPT)

‚Üí O que s√£o requisi√ß√µes?

Requisi√ß√µes (ou "requests") s√£o pedidos que um software faz para se comunicar com outro sistema,
normalmente usando a rede. Em JavaScript, isso √© comumente usado para buscar dados de servidores,
APIs ou bancos de dados, sem que a p√°gina precise ser recarregada.

‚Üí Por que usamos?

Porque aplica√ß√µes modernas precisam interagir com servidores constantemente:
- Buscar dados (ex: posts, produtos, usu√°rios)
- Enviar dados (ex: formul√°rios, uploads)
- Atualizar dados (ex: editar perfil)
- Deletar dados (ex: apagar conta)

‚Üí Tipos de m√©todos HTTP mais usados:

1. GET    ‚Üí para **buscar** informa√ß√µes
2. POST   ‚Üí para **enviar/criar** informa√ß√µes
3. PUT    ‚Üí para **atualizar** informa√ß√µes
4. DELETE ‚Üí para **remover** informa√ß√µes

‚Üí Como fazemos requisi√ß√µes no JavaScript?

Podemos usar:
- A fun√ß√£o nativa `fetch()` (mais moderna e baseada em Promises)
- A biblioteca `axios` (mais poderosa e amig√°vel em alguns casos)
- Antigamente, usava-se `XMLHttpRequest` (hoje obsoleto para novos projetos)

‚Üí Exemplo b√°sico usando `fetch()`:

fetch('https://api.exemplo.com/dados')
  .then(resposta => resposta.json()) // converte resposta para JSON
  .then(dados => {
    console.log(dados); // manipula os dados recebidos
  })
  .catch(erro => {
    console.error('Erro na requisi√ß√£o:', erro);
  });

‚Üí Importante lembrar:
- Toda requisi√ß√£o pode falhar (por isso usamos `.catch()`)
- A resposta do servidor quase sempre precisa ser transformada com `.json()` ou `.text()`
- Requisi√ß√µes s√£o ass√≠ncronas (acontecem "em paralelo"), por isso usamos `.then()` ou `async/await`

‚Üí Dica para nunca esquecer:
"Requisi√ß√µes s√£o como cartas que seu c√≥digo envia para outro computador.
Se a carta for bem escrita e o destinat√°rio responder, voc√™ pode usar a resposta como quiser."

*/
